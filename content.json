{"pages":[{"title":"About","date":"2018-07-28T10:53:32.616Z","path":"about/index.html","text":"作者介绍 座右铭：人生苦短，珍惜时间 兴趣爱好： 计算机、摄影、旅游、美食 工作状态： 就业中 关注领域： WEB开发，大数据，机器学习，架构运维 GET技能 前端： JavaScript、Html5、VueJs Python：Flask框架，标准库 Linux： Shell脚本，command 大数据：Kafka、Zookeeper、Hbase、HDFS、Elasticsearch、Mongodb FQA 平常学习都比较零散，刚好用博客做一下记录 不定时更新，想到就写点吧~"},{"title":"Categories","date":"2018-07-28T02:53:57.789Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2018-07-28T02:53:57.792Z","path":"tags/index.html","text":""}],"posts":[{"title":"vsftp的一个问题","date":"2018-10-30T16:00:00.000Z","path":"wiki/vsftp的一个问题/","text":"使用pasv模式的时候不能打开port模式的开关，即pasv_enable=YES port_enable=NO，否则就算设置了pasv_min_port和pasv_max_port也不起作用。今天在开启防火墙的时候发现怎么都连不上，原来是数据传输的时候端口并不是预设的端口范围，导致发了syn被防火墙丢弃了。 启用TLS,直接修改vsftpd.conf，添加如下123456789101112#启用加密ssl_enable=YES#使用 TSL v1 加密协议ssl_tlsv1=YES#使用eof标志表示上传完成strict_ssl_read_eof=YES#证书路径rsa_cert_file=/etc/letsencrypt/live/itnmg.net/fullchain.pem#证书私钥路径rsa_private_key_file=/etc/letsencrypt/live/itnmg.net/privkey.pem#指定加密算法, 如果不指定, 默认为 DES-CBC3-SHAssl_ciphers=ECDHE-RSA-AES128-GCM-SHA256","tags":[{"name":"vsftp","slug":"vsftp","permalink":"http://finsos.github.io/tags/vsftp/"}],"categories":[{"name":"运维记录","slug":"运维记录","permalink":"http://finsos.github.io/categories/运维记录/"},{"name":"FTP","slug":"运维记录/FTP","permalink":"http://finsos.github.io/categories/运维记录/FTP/"}]},{"title":"GIT轻量级管理服务搭建","date":"2018-10-30T16:00:00.000Z","path":"wiki/git轻量级管理服务搭建/","text":"系统版本：CentOS release 6.4 (Final)系统配置：CPU2核 内存2G 硬盘15G 有git的需求，但是又觉得gitlab太重耗资源，于是决定找个轻量级的git带web来管理，找来找去搞了会儿cgit，但是不带权限控制语法高亮也不是我喜欢的，所有放弃。后面利用了git，gitolite，gitweb三剑客+nginx搭建了，于是有了下面的文档。 安装git 这个不用多说大家都会12# 直接yum装了yum -y install git 注意：1.7版本不支持语法高亮，建议升级到2.+ 接上面，好吧，这里再次踩坑了！centos仓库自带的版本为1.7,因此我们要升级到2.+，这里使用编译安装：12345678910111213# 安装依赖yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel gcc perl-ExtUtils-MakeMaker package# 下载源码包，这里最新2.18wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.18.0.tar.gz# 解压tar -zxvf git-2.18.0.tar.gz &amp;&amp; cd git-2.18.0# 编译安装./configure --prefix=/usr/local/git allmakemake install# 加环境变量echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt; /etc/profile.d/git.shsource /etc/profile.d/git.sh 安装gitolite官方的安装介绍，很简单 git服务器端操作 切换到git用户目录下去操作su - gitmkdir -p ~/bin 克隆仓库git clone https://github.com/sitaramc/gitolite 安装这时会在当前目录下生成repositories目录，其中gitolite-admin.git就是我们主要的权限管理仓库gitolite/install -ln ~/bin 初始用户这里因为是初始第一个用户，所以是管理员，username.pub是客户端的公钥gitolite setup -pk username.pub ！注意：不能初始化管理员在git server上，即，在server上clone权限管理仓库，然后再push到server git客户端操作 生成一对密钥ssh-keygen -t rsa -b 2048 #一路回车空密码 克隆权限管理仓库这里即使用server上初始的管理员机器git clone git@gitserver.domain:gitolite-admin.git 配置权限管理vim gitolite-admin/conf/gitolite.conf 权限管理介绍 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 关键字C 代表创建，仅在通配符版本库授权是使用，用于指定谁可以创建与通配符匹配的版本库R RW RW+ R为只读，RW为读写权限，RW+代表除了拥有读写权限，还可以强制执行推送RWC RW+C RWD RW+D D代表允许删除和正则匹配的引用RWCD RW+CD# 定义组，用户@all 所有组、所有用户、所有版本库@administrator = admin kid 定义一个administrator组并将用户admin，kid加入该组@develop = dev01 dev02@testing = test01 test02# 传统模式的引用授权repo test/repo1 RW+ = @administrators 允许管理员组任意读写，强制推送 RW master refs/heads/feature/ = @develop 除了对master和refs/heads/feature/开头的引用具有读写权限外，实际上可以读取所有引用。这是因为读取操作授权阶段无法获知引用。 R = @testing 对版本库拥有只读授权# 扩展模式的引用授权扩展模式的引用授权，指的是该版本库的授权指令出现了下列授权关键字中的一个或多个：RWC、RWD、RWCD、RW+C、RW+D、RW+CD，将分支的创建权限和删除权限从读写权限中分离出来，从而可对分支进行更为精细的权限控制。repo test/repo2 RW+CD = @administrators RW+C = @develop RW = @testing# 以NAME/开头的引用在授权文件中，如果一个版本库的授权指令中的正则引用字段出现了以NAME/开头的引用，则表明该授权指令是针对路径进行的写授权，并且该版本库要进行基于路径的写授权判断。repo foo RW = @junior_devs @senior_devs 两个用户组均可以读写该版本库所有文件 RW /NAME/ = @senior_devs 只允许高级开发读写特定目录 - /NAME/Makefile = @junior_devs 没有访问特定目录Makefile的权限 RW NAME/ = @junior_devs 允许读写特定路径的所有文件# 以VREF/开头的引用按照DAY，Hour时间限制: VREF/Hour/NN“NN” can be between 00 to 23repo bar RW+ = @all - VREF/Hour/09 = @junior-devs - VREF/Hour/1[0-9] = @junior-devs - VREF/Hour/2[0-9] = @junior-devs按照来源地址进行限制repo foo RW+ VREF/FROM/192.168.48.0/23 = @junior-devs - VREF/FROM = @junior-devs 文档引用：http://gitolite.com/gitolite/cookbook/#example-vrefshttps://blog.csdn.net/Rebel_Yangke/article/details/51554499 添加一个用户即将用户公钥添加到gitolite-admin/keydir，命名规则：username.pub 提交到git server，提交后才会生效git add -Agit commit -a -m &quot;Add user msg&quot;git push ！注意：不能直接去改git server上的文件，必须经过提交生成，eat dogs food. 安装gitweb 安装spawn-fcgi、fcgi-devel、highlightyum -y install spawn-fcgi fcgi-devel highlight 安装fastcgi-wrapper 123456git clone https://github.com/gnosek/fcgiwrap.gitcd fcgiwrapautoreconf -i./configuremakemake install 启动fastcgi-wrapperspawn-fcgi -f /usr/local/sbin/fcgiwrap -a 127.0.0.1 -p 10086 安装gitweb123456# yum安装yum -y install gitweb# 推荐手动安装,这里同样安装2.18版本，gitweb和git在一个包里cd git-2.18.0make GITWEB_PROJECTROOT=&quot;/opt/git&quot; prefix=/usr install-gitweb# 安装目录在$&#123;PREFIX&#125;/share/gitweb 注意：1.7版本不支持语法高亮，建议升级到2.+ gitweb配置创建/etc/gitweb.conf如果没有的话,配置示例如下：12345678910111213141516171819202122232425# 配置仓库路径$projectroot = &quot;/home/git/repositories&quot;;# 配置web需要展示的仓库$projects_list = &quot;/home/git/projects.list&quot;;$strict_export = 1;# 下面就是网站静态文件的设置, / 代表站点根目录# stylesheet to use@stylesheets = (&quot;/gitweb.css&quot;);# javascript code for gitweb$javascript = &quot;/gitweb.js&quot;;# logo to use$logo = &quot;/git-logo.png&quot;;# the &apos;favicon&apos;$favicon = &quot;/git-favicon.png&quot;;# 配置clone的仓库地址，http和ssh@git_base_url_list = qw(git://git.finsos.com ssh://git.finsos.com/home/git/repositories);# 显示修改后的最后提交，开启$feature&#123;&apos;blame&apos;&#125;&#123;&apos;default&apos;&#125; = [1];$feature&#123;&apos;blame&apos;&#125;&#123;&apos;override&apos;&#125; = 1;# 关闭快照压缩存档$feature&#123;&apos;snapshot&apos;&#125;&#123;&apos;default&apos;&#125; = [&apos;zip&apos;, &apos;tgz&apos;];$feature&#123;&apos;snapshot&apos;&#125;&#123;&apos;override&apos;&#125; = 1;# 开启语法高亮,1.8+版本才支持$feature&#123;&apos;highlight&apos;&#125;&#123;&apos;default&apos;&#125; = [1]; 资料：https://mirrors.edge.kernel.org/pub/software/scm/git/docs/gitweb.conf.htmlhttps://git.wiki.kernel.org/index.php/Gitweb 美化gitweb,安装gitweb-themegit clone https://github.com/kogakure/gitweb-theme.git 包里面提供了setup安装脚本./setup -vi --install 然并卵，直接把XXX.png和XXX.css拷贝到网站目录下就OK\\cp -af gitweb-theme/*.{css,png} /var/www/git/ 安装web服务器，这里选择Nginx nginx信息 版本：nginx/1.13.8参数：–prefix=/usr/local/nginx –pid-path=/var/run/nginx/nginx.pid –with-threads –with-http_ssl_module –with-http_v2_module –with-http_realip_module –with-http_addition_module –with-http_sub_module –with-http_stub_status_module –with-pcre –with-stream=dynamic –add-dynamic-module=../echo-nginx-module-0.61/ 安装编译安装或者yum安装都行，这里就不写了 用htpasswd生成个密码配置站点用htpasswd -cmds .password username git站点配置示例 12345678910111213141516171819202122server &#123; listen 80; server_name git.domain.com; access_log logs/git.domain.access.log main; error_log logs/git.domain.error.log warn; root /var/www/git; # HTTP Basic配置 auth_basic &quot;Git Server On domain.com&quot;; auth_basic_user_file conf/.password; location ~* ^.+\\.(css|png|ico|js)$ &#123; expires 30d; &#125; location / &#123; index gitweb.cgi; fastcgi_param SCRIPT_FILENAME $document_root/gitweb.cgi; fastcgi_pass 127.0.0.1:10086; fastcgi_param HTTP_HOST $server_name; fastcgi_param PATH_INFO $uri; fastcgi_param QUERY_INFO $uri; include &quot;fastcgi_params&quot;; &#125;&#125; 附一个nginx的服务管理脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124#!/bin/sh# nginx - this script starts and stops the nginx daemon# chkconfig: - 85 15# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\# proxy and IMAP/POP3 proxy server# processname: nginx# config: /etc/nginx/nginx.conf# config: /etc/sysconfig/nginx# pidfile: /var/run/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0nginx=&quot;/usr/local/nginx/sbin/nginx&quot;prog=$(basename $nginx)NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot;[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginxlockfile=/var/lock/subsys/nginxmake_dirs() &#123; # make required directories user=`nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:&quot; | sed &apos;s/[^*]*--user=\\([^ ]*\\).*/\\1/g&apos; -` options=`$nginx -V 2&gt;&amp;1 | grep &apos;configure arguments:&apos;` for opt in $options; do if [ `echo $opt | grep &apos;.*-temp-path&apos;` ]; then value=`echo $opt | cut -d &quot;=&quot; -f 2` if [ ! -d &quot;$value&quot; ]; then # echo &quot;creating&quot; $value mkdir -p $value &amp;&amp; chown -R $user $value fi fi done&#125;start() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6# make_dirs echo -n $&quot;Starting $prog: &quot; daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $&quot;Stopping $prog: &quot; killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop sleep 1 start&#125;reload() &#123; configtest || return $? echo -n $&quot;Reloading $prog: &quot; killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case &quot;$1&quot; in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot; exit 2esac","tags":[{"name":"git管理","slug":"git管理","permalink":"http://finsos.github.io/tags/git管理/"}],"categories":[{"name":"Git","slug":"Git","permalink":"http://finsos.github.io/categories/Git/"}]},{"title":"一句话命令","date":"2018-10-30T16:00:00.000Z","path":"wiki/一句话命令/","text":"ansible setup模块过滤多个返回参数ansible hosts -m setup | sed &#39;s/.*=&gt;//g&#39;|jq &#39;.ansible_facts|{ip: .ansible_default_ipv4.address, version: .ansible_distribution_version}&#39; openssl 检查p12证书有效期openssl pkcs12 -in push_cert_prod.p12 -nokeys|openssl x509 -noout -startdate -enddate 日常运维 批量curl检查服务能否访问ls -l /usr/local/tomcat/webapps |grep ^d|awk &#39;{print $NF}&#39;|xargs -I@ curl -sI http://localhost:8080/@/application.wadl 统计网络连接状态netstat -n | awk &#39;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&#39; 计算系统CPU空闲率cat /proc/uptime | awk &#39;{print $2/($1*4)*100 &quot;%&quot;}&#39; uptime第一列表示系统启动到现在使用的时间,第二列是空闲的时间,4表示有4个cpu","tags":[],"categories":[{"name":"运维记录","slug":"运维记录","permalink":"http://finsos.github.io/categories/运维记录/"}]},{"title":"记一次SSL证书问题","date":"2018-10-30T16:00:00.000Z","path":"wiki/记一次SSL证书问题/","text":"现象新上线一个服务，发现使用浏览器访问没有任何问题，微信IPhone可以访问，Android有些无法访问，排查了公网IP，微信版本，发现没有太多规律，线上排查日志发现连接已经上来了，但是到了nginx就没有日志了。后面排查下来就确定了是SSL证书链缺失导致。 排查 使用openssl访问测试openssl s_client -connect check.jmc.com.cn:443报错如下： CONNECTED(00000003)…verify error:num=20:unable to get local issuer certificateverify return:1…verify error:num=27:certificate not trustedverify return:1…verify error:num=21:unable to verify the first certificateverify return:1…Certificate chain0 s:/C=CN/ST=Jiangxi/L=Nanchang/O=Jiangling Motors Co.,LTD/OU=IT/CN=*.jmc.com.cn i:/C=US/O=DigiCert Inc/CN=DigiCert SHA2 Secure Server CA 解释： Certificate chain显示了证书链，最前面为序号，从0开始 s: Server CA，i: Information CA 这里可以看出，证书链中只有一个证书信息，并没有显示Information CA的签发证书，由此可见是证书链缺失，导致TLS验证不过 解决 由于客户那边提供的PFX格式的证书，所以需要分离出pem证书和keyopenssl pkcs12 -in mycert.pfx -nokeys -out mycert.pemopenssl pkcs12 -in mycert.pfx -nocerts -nodes -out mycert.key 此时有两种办法： 向证书供应商索取fullchain证书，即包含完整证书链的证书 去证书官方网站查找是否有Information CRT可供下载，如果有，就可以下载下来添加到我们的server证书中去 这里用了第二种，在digicert官网下载CRT证书 https://www.digicert.com/digicert-root-certificates.htm这里我们缺少的CN为 “DigiCert SHA2 Secure Server CA”，因此下载对应的CRTCN也可通过浏览器访问时查询证书关系得知 下载的CRT证书因为是DER格式的，所以我们还需要转换成PEM格式openssl x509 -inform DER -in DigiCertSHA2SecureServerCA.crt -outform PEM -out informaition.pem 接下来只需要将两个证书合并在一起就可以了，合并时遵循最上面是 S 其次 I 最后 R，但是一般R都是内置了，所以可以省略 S: Server CA #域名证书I: Information CA #机构证书R: Root CA #根证书 然后在nginx上配置我们改过的pem证书文件，以及分离的证书key，访问测试 …Certificate chain0 s:/C=CN/ST=Jiangxi/L=Nanchang/O=Jiangling Motors Co.,LTD/OU=IT/CN=*.jmc.com.cn i:/C=US/O=DigiCert Inc/CN=DigiCert SHA2 Secure Server CA1 s:/C=US/O=DigiCert Inc/CN=DigiCert SHA2 Secure Server CA i:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA…Verify return code: 0 (ok) 成功。 后通过之前有问题的设备，打开微信访问域名已经可以打开并显示页面了。","tags":[{"name":"ssl","slug":"ssl","permalink":"http://finsos.github.io/tags/ssl/"},{"name":"http","slug":"http","permalink":"http://finsos.github.io/tags/http/"}],"categories":[{"name":"运维记录","slug":"运维记录","permalink":"http://finsos.github.io/categories/运维记录/"},{"name":"Web服务","slug":"运维记录/Web服务","permalink":"http://finsos.github.io/categories/运维记录/Web服务/"}]},{"title":"","date":"2018-08-31T14:41:10.947Z","path":"wiki/好听的歌单/","text":"好听的歌单 可能否 - 小木雅 好可惜 - 庄心妍 过客 - 阿涵 再见只是陌生人 - 庄心妍 不再联系 - 夏天Alex 后来的我们 - 刘增瞳","tags":[],"categories":[]},{"title":"Welcome to luke's wiki site!","date":"2018-07-28T14:17:42.534Z","path":"wiki/index/","text":"导语这只是个人知识站点，主要用于记录平时一些知识碎片，同时也方便自己今后查阅，内容不限定，有时间就更新。 大概理一下主要内容： 平时学习前沿的技术，做个知识积累 学习成果，开发的一些工具之类 工作中踩过的坑，既然填坑了，那就铺条路出来 生活中的琐碎心情 推荐的书籍，阅读心得 互联网资讯类，新鲜事儿 电影音乐类，毕竟我爱电视剧，😁 摄影类，美丽的事物赏心悦目 事情比较杂，但是主要是专心于技术，学习，提升自我。 结束最后来张图，大家共勉。 凛冬已至，还不赶紧逼自己一把。","tags":[],"categories":[]},{"title":"Elasticsearch快照备份","date":"2018-07-28T14:04:58.090Z","path":"wiki/Elasticsearch快照备份/","text":"版本信息 ElasticSearch: 5.3.0JDK: 1.8OS: CentOS release 6.8 (Final) 修改bin/elasticsearch-plugin（如plugin命令不可用） 使用ansible-elasticsearch这个playbook安装会存在此问题 12# For a distribution package, the value is \"/etc/sysconfig/elasticsearch\".ES_ENV_FILE=\"/etc/sysconfig/这里修改为实际的配置文件名\" 安装repository-hdfs插件 安装命令 12cd /usr/share/elasticsearch/bin./elasticsearch-plugin install repository-hdfs 修改配置plugin-security.policy(5.3版本bug) Q: 创建快照时会报错 1java.security.AccessControlException: access denied (\"javax.security.auth.PrivateCredentialPermission\" \"org.apache.hadoop.security.Credentials\" \"read\") A: 修复报错 12345678910111213141516# 修改 ../plugins/repository-hdfs/plugin-security.policy# 增加如下： permission java.lang.RuntimePermission \"accessDeclaredMembers\"; permission java.lang.RuntimePermission \"getClassLoader\"; permission java.lang.RuntimePermission \"shutdownHooks\"; permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\"; permission javax.security.auth.AuthPermission \"doAs\"; permission javax.security.auth.AuthPermission \"getSubject\"; permission javax.security.auth.AuthPermission \"modifyPrivateCredentials\"; permission java.security.AllPermission; permission java.util.PropertyPermission \"*\", \"read,write\"; permission javax.security.auth.PrivateCredentialPermission \"org.apache.hadoop.security.Credentials * \\\"*\\\"\", \"read\"; # 修改Elastic配置目录下jvm.options# 指定权限文件-Djava.security.policy=file:///usr/share/elasticsearch/plugins/repository-hdfs/plugin-security.policy 重启ES服务加载插件1/etc/init.d/elasticsearch restart 利用快照API备份 在hdfs上创建备份目录授权 123hadoop fs -mkdir /es_backup#要求es用户可读写hadoop fs -chown elasticsearch:elasticsearch /es_backup 创建仓库 123456789101112131415161718PUT /_snapshot/my_backup &#123; \"type\": \"hdfs\", \"settings\": &#123; \"path\": \"/es_backup\", \"load_defaults\": \"true\", \"compress\": \"true\", \"uri\": \"hdfs://172.26.33.55:8020\" &#125; &#125;# 查看仓库信息GET /_snapshot/my_backup# 删除仓库DELETE /_snapshot/my_backup# 此时查看HDFS上的文件hadoop fs -ls /es_backuphadoop fs -cat /es_backup/index-0 创建快照 12345678910PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true &#123; \"indices\": \"index_1,index_2\", //不设置这个属性，默认备份所有index \"ignore_unavailable\": true, \"include_global_state\": false &#125;# 查看快照信息，支持通配符GET _snapshot/my_backup/snapshot_1# 删除快照，这里只是es的引用删除，hdfs中的文件并不会删除DELETE _snapshot/my_backup/snapshot_1 恢复快照 1234567891011POST /_snapshot/my_backup/snapshot_1/_restore &#123; \"indices\": \"index_1,index_2\", //指定索引恢复，不指定就是所有 \"ignore_unavailable\": true, //忽略恢复时异常索引 \"include_global_state\": false, //是否存储全局转态信息,fasle代表有一个或几个失败，不会导致整个任务失败 \"rename_pattern\": \"index_(.+)\", //是否需要重命名索引 \"rename_replacement\": \"restored_index_$1\" //替换后的索引名 &#125;# 监控恢复情况GET restored_index_1/_recovery","tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://finsos.github.io/tags/elasticsearch/"}],"categories":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://finsos.github.io/categories/Elasticsearch/"}]},{"title":"准备开始 深度学习","date":"2018-02-26T14:11:01.614Z","path":"wiki/进军深度学习/","text":"一直写了没有发出， 拖沓症真的挺严重。。。 进军深度学习课程近期看了一些关于人工智能系列的文章，对这种前沿的技术充满了兴趣，但是苦于上学时候没有好好学习😂，所以想补充一下数学基础知识。学习的过程中顺便温习了一下解方程 目前看的数学书籍 线性代数 看了前面几章，了解了下向量的概念，以及矩阵的概念。其次，就是解方程组。 又是一两个月没看了，忘得差不多了，唉 离散数学 暂时搁置 简单数学示例12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#!/bin/env python#-*-encoding: utf8-*-#python解一元方程'''usag: simple.py number power symbolnotice: please input full args.args: number - you can input any numbers. power - it's a power for number like 3^2, the 2 is 3'power. symbol - the math symbol like +,-,*,/'''import osimport stringdef quadratic(number, power, symbol): i = 1 result = [] text = [] while True: calc_text = str(pow(number, power)) + ' ' + symbol + ' ' + str(pow((number - i), power)) calc_result = eval(calc_text) i += 1 if calc_result &lt; 0: print (u'no solution!') continue if i &gt; number: break result.append(calc_result) text.append(calc_text) return result, text if __name__ == '__main__': try: number = os.sys.argv[1] power = os.sys.argv[2] symbol = os.sys.argv[3] number = int(number) power = int(power) symbol = str(symbol) symbol_standard = '+-*/' symbol_sense = string.find(symbol_standard, symbol) != -1 if not (isinstance(number,int) and isinstance(power,int) and symbol_sense): print (__doc__) os.sys.exit(1) except Exception: print (__doc__) os.sys.exit(1) (result,text) = quadratic(number, power, symbol) i = 0 total = int() for i in range(len(text)): total += result[i] print ('%s = %s' % (text[i], result[i])) i += 1 if i &gt; len(text): break print ('total: %s \\nlength: %s \\naverage: %s' % (total, len(text), round(total/len(text))))","tags":[{"name":"python","slug":"python","permalink":"http://finsos.github.io/tags/python/"}],"categories":[{"name":"文笔随记","slug":"文笔随记","permalink":"http://finsos.github.io/categories/文笔随记/"},{"name":"向往","slug":"文笔随记/向往","permalink":"http://finsos.github.io/categories/文笔随记/向往/"}]},{"title":"centos搭建局域网repo源","date":"2018-01-20T05:35:41.000Z","path":"wiki/centos搭建本地repo源/","text":"起初是因为有些时候需要安装的一些包总是在系统自带的repo仓库找不到，有些国外的源又很慢，自己本地都要下载很长时间，偶尔又有一些依赖缺失之类的，干脆就把自己工作环境中所需要的包存起来，自己建一个内网仓库，于是有了下面这篇文章。 依赖 安装httpd服务或者nginx服务。#省略 一些目录设定 DocumentRoot: /var/www/html RepoDirectory: /var/www/html/HDP-UTILS-1.1.0.21 脚本目录： /etc/init.d 下载需要的RPM 进入DocumentRoot，将下载的rpm包copy至该目录 或者直接从已有源地址仓库下载： 12#下载该目录下所有文件wget -c -r -np -P /var/www/html http://hdp.domain/HDP-UTILS-1.1.0.21 解释一下wget命令的用法： 12345-c 断点续传-r 递归下载-np 不下载父附录-nd 不建立目录，若无此选项，将按照网站目录结构创建目录-P 将下载的所有内容存放到指定目录 使用createrepo命令创建repo信息 安装createrepo 12#一般centos自带的yum仓库就有yum install -y createrepo 执行命令创建repo 12#初始化源,生成repodata元数据,保存在RepoDirectorycreaterepo --workers=2 -pdo /var/www/html/HDP-UTILS-1.1.0.21 /var/www/html/HDP-UTILS-1.1.0.21 -c /tmp/HDP-UTILS-1.1.0.21 -v 解释一下createrepo命令： 12345-p 以漂亮的格式输出xml-d 使用sqlite存储生成的元数据，默认项-o 指定元数据的输出位置-c 指定缓存目录，缓存软件仓库中软件包的校验和信息-v 以详细模式输出 启动http服务 启动服务以供其他机器访问1/etc/init.d/httpd restart 创建客户端使用的repo文件12345678cat /etc/yum.repos.d/HDP-UTILS.repo &lt;&lt;EOF #VERSION_NUMBER=1.1.0.21 [HDP-UTILS-1.1.0.21] name=HDP-UTILS-1.1.0.21 baseurl=http://local.network.domain/HDP-UTILS-1.1.0.21/ gpgcheck=0 enabled=1EOF 访问测试 浏览器访问[http://local.network.domain/HDP-UTILS-1.1.0.21/] 客户端服务器使用命令 yum repolist|grep &quot;HDP-UTILS-1.1.0.21&quot; 看能否获取到正确的repo和文件数量","tags":[{"name":"repo仓库","slug":"repo仓库","permalink":"http://finsos.github.io/tags/repo仓库/"}],"categories":[{"name":"运维记录","slug":"运维记录","permalink":"http://finsos.github.io/categories/运维记录/"},{"name":"Linux","slug":"运维记录/Linux","permalink":"http://finsos.github.io/categories/运维记录/Linux/"}]},{"title":"写在第一篇文章的话","date":"2018-01-19T15:23:44.000Z","path":"wiki/写在第一篇文章的话/","text":"博客开张了，The first blood还是要贡献一下，接触博客好多，今天算是第一次完全搭建属于自己的个人博客，也是无意间接触到GitHub Pages，觉得很方便，而且完美支持Markdown，就这么选好模板入坑了。 写在第一篇文章的话这个博客，主要是用于记录自己的学习过程，以及工作中所踩的一些新坑，包括自己脑子记不住的知识点(大家都懂的^_^)! 其实偶尔也会有一些自己的心情体会发表一下，主要是吐槽啦~ 为什么开博客 希望养成良好的个人习惯 技术更新迭代很快，对我这种战5渣的冲击力太大，必须时刻提醒自己要思（挣）考（钱）！要学（高）习（薪）！ 不定时更新，自己满足就好，当然，如果文章中有涉及到可以帮助大家的知识点，我也是很开心啦啦啦~ 我是什么人 目前一名普通的Linux运维（民工） 接触了一些貌似高大山的东西，消息队列、分布式计算、分布式存储、虚拟化、自动化运维、DevOps 等等 对于上面那些平时光说，光听，实际原理其实并没有吃透，纯粹操作一点，学会一点，其实然并卵。 本篇完 有点晚了，需要睡觉了，想起来再说。","tags":[],"categories":[{"name":"文笔随记","slug":"文笔随记","permalink":"http://finsos.github.io/categories/文笔随记/"},{"name":"心情","slug":"文笔随记/心情","permalink":"http://finsos.github.io/categories/文笔随记/心情/"}]}]}